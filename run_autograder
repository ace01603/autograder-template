#!/usr/bin/env bash
###
# This script was created using a Jest-Gradescope autograder for reference
# https://github.com/ucsb-gradescope-tools/jest-autograder/
# The original autograder has been modified to work with the Playwright testing library (instead of Jest) and p5js sketches
###

DIR="/autograder/source"
OUTPUT_DIR="/autograder/results"
STUDENT_SUBMISSION_DIR="/autograder/submission"
PLAYWRIGHT_JSON_TOOL="$DIR/tools/playwright_to_gradescope.py"
SKETCHES_DIR="$DIR/staging/sketches"



###########################################################################################
#
#   Prepare student files for submission:
#       - Unzip all zip files and move to staging
#       - Print elegant error if src not found showing all files that were found
#
###########################################################################################
cd $STUDENT_SUBMISSION_DIR

echo '[GS] Extracting zips in student submission...'
find . -name "*.zip" | while read filename; do unzip -o -d "`dirname "$filename"`" "$filename"; done;

# Clean out __MACOSX directories and hidden files
find . -name "__MACOSX" -exec rm -rf {} \;

# Remove old results.json files
rm -r "$OUTPUT_DIR"/*.json

find_and_copy_sketch() {
    PATH_TO_FILES=$1 # The path to the file to search e.g. */sketch_folder or *
    PATH_TO_ASSETS=$2
    COPY_TO=$3 # The path in the staging area that the submission file should be copied to
    # Search for the sketch first
    cd $STUDENT_SUBMISSION_DIR # get from staging back to submission 
    STUDENT_SKETCH=$(find -path "*/"$PATH_TO_FILES"")
    STUDENT_ASSETS=$(find -type d -name assets)
    echo "[GS] Searching for "$PATH_TO_FILES" in the student submission"
    if [ -n "$STUDENT_SKETCH" ]
    then
        echo "[GS] Sketch found "$STUDENT_SKETCH""
        cd "$DIR"/staging
        STUDENT_SKETCH_PATH="$STUDENT_SUBMISSION_DIR"/"$STUDENT_SKETCH"
        echo " [GS] Copying "$STUDENT_SKETCH_PATH" to "$COPY_TO"";
        rm -rf "$COPY_TO"/sketch.js
        cp -r "$STUDENT_SKETCH_PATH" "$COPY_TO"
        echo " [GS] Sketch copy complete!"
        if [ -n ""$STUDENT_ASSETS"" ]
        then
            echo "[GS] Assets folder found"
            STUDENT_ASSETS_PATH="$STUDENT_SUBMISSION_DIR"/"$STUDENT_ASSETS"
            echo "  [GS] Copying "$STUDENT_ASSETS_PATH" to "$COPY_TO"";
            rm -r "$COPY_TO"/assets
            cp -r "$STUDENT_ASSETS_PATH" "$COPY_TO"
            echo "  [GS] Assets copy complete"
        fi
    else
        echo "[GS] Could not find sketch folder "$STUDENT_SKETCH""
        cd "$DIR"/staging
    fi
}

copy_dependency_to_sketch() {
    ITEM_TO_COPY=$1
    SKETCH_FOLDER=$2
    echo "[GS] Copying "$ITEM_TO_COPY" to "$SKETCH_FOLDER""
    cp -r ./"$ITEM_TO_COPY" ./sketches/"$SKETCH_FOLDER"/"$ITEM_TO_COPY"
}


cd "$DIR"/staging

rm -rf "$DIR"/staging/node_modules

npm install

npx playwright install --with-deps chromium


echo "[GS] Looking for sketch folders in "$SKETCHES_DIR""
for FILE in "$SKETCHES_DIR"/*; do
    echo "[GS] checking "$FILE""
    if [ -d "$FILE" ]
    then
        SKETCH_FOLDER="$(basename -- "$FILE")"
        # Copy the student's code
        COPY_TO="$SKETCHES_DIR"/"$SKETCH_FOLDER"
        PATH_TO_SKETCH=""$SKETCH_FOLDER"/sketch.js" 
        PATH_TO_ASSETS=""$SKETCH_FOLDER"/assets"
        find_and_copy_sketch "$PATH_TO_SKETCH" "$PATH_TO_ASSETS" "$COPY_TO"

        # Copy autograderTests
        copy_dependency_to_sketch "autograderTests" "$SKETCH_FOLDER"
        # Copy node_modules
        copy_dependency_to_sketch "node_modules" "$SKETCH_FOLDER"
        # Copy p5js
        copy_dependency_to_sketch "p5js" "$SKETCH_FOLDER"
        # Copy testingDependencies
        copy_dependency_to_sketch "testingDependencies" "$SKETCH_FOLDER"
        # Copy package-lock.json
        copy_dependency_to_sketch "package-lock.json" "$SKETCH_FOLDER"
        # Copy package.json
        copy_dependency_to_sketch "package.json" "$SKETCH_FOLDER"
        # Copy playwright.config.js
        copy_dependency_to_sketch "playwright.config.js" "$SKETCH_FOLDER"
        cd "$SKETCHES_DIR"/"$SKETCH_FOLDER"
        npx playwright test # Only test in this folder
        cd "$DIR"/staging # Should be back to staging
    fi
done

python3 "$PLAYWRIGHT_JSON_TOOL" -o "$OUTPUT_DIR"/"results.json"

